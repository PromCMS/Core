<?php

namespace PromCMS\Cli\Templates\Models;

use PhpParser\Node\Stmt;
use PromCMS\Core\PromConfig\Entity;
use PhpParser\Node;

class ModelTemplate extends \PromCMS\Cli\Templates\Models\Abstract\ModelTemplate
{
  public function __construct(string $root, Entity $entity, protected ModelTemplateMode $mode)
  {
    parent::__construct($root, $entity, $mode);

    $this->loadExisting();

    $this->header
      ->addLine('This file is generated by PromCMS, however you can add methods and other logic to this class')
      ->addLine('as this file will be just checked for presence of class in next models sync.');
  }

  protected function getNamespace()
  {
    $possibleNamespace = $this->ast[0];

    // Create anew if it does not exist yet
    if (($possibleNamespace instanceof Stmt\Namespace_) === false) {
      $possibleNamespace = $this->ast[] = parent::getNamespace();
    }

    /** @var array<Stmt\Use_> */
    $useStmts = array_filter($possibleNamespace->stmts, fn($stmt) => $stmt instanceof Stmt\Use_);
    $otherStmts = array_filter($possibleNamespace->stmts, fn($stmt) => ($stmt instanceof Stmt\Use_) === false);

    $enforcedUses = parent::getUseStatements($this->entity);
    $existingUsesAsArray = [];
    foreach ($useStmts as $stmt) {
      foreach ($stmt->uses as $stmtUse) {
        $existingUsesAsArray[$stmtUse->name->name] = $stmtUse->alias;
      }
    }

    // Unsets enforced
    foreach ($enforcedUses as $stmt) {
      foreach ($stmt->uses as $stmtUse) {
        $useName = $stmtUse->name->name;

        if (isset($existingUsesAsArray[$useName])) {
          unset($existingUsesAsArray[$useName]);
        }
      }
    }

    $uses = $enforcedUses;
    foreach ($existingUsesAsArray as $name => $alias) {
      $uses[] = new Stmt\Use_(
        uses: [
          new Stmt\UseUse(new Node\Name($name), $alias)
        ]
      );
    }

    $possibleNamespace->stmts = [...$uses, ...$otherStmts];

    return $possibleNamespace;
  }

  private function getClassFromAst()
  {
    $namespace = $this->getNamespace();
    $isOutputLocalized = $this->mode === ModelTemplateMode::LOCALIZED;
    $phpName = $isOutputLocalized ? $this->entity->getTranslationPhpName() : $this->entity->phpName;
    $class = null;

    foreach ($namespace->stmts as $stmt) {
      if ($stmt instanceof Stmt\Class_ && $stmt->name->name === $phpName) {
        $class = $stmt;
      }
    }

    if ($class === null) {
      $class = new Stmt\Class_($phpName);
      $namespace->stmts[] = $class;
    }

    return $class;
  }

  protected function getClass(): Stmt\Class_
  {
    $class = $this->getClassFromAst();

    $isOutputLocalized = $this->mode === ModelTemplateMode::LOCALIZED;

    $phpName = $isOutputLocalized ? $this->entity->getTranslationPhpName() : $this->entity->phpName;
    $class->extends = new Node\Name('Base\\' . $phpName);

    $attributes = [
      new Node\Attribute(new Node\Name('ORM\Entity')),
      new Node\Attribute(new Node\Name('ORM\Table'), [
        new Node\Arg(
          name: new Node\Identifier('name'),
          value: new Node\Scalar\String_(
            $isOutputLocalized
            ? $this->entity->getTranslationTableName()
            : $this->entity->tableName
          )
        )
      ]),
    ];

    if ($isOutputLocalized) {
      $attributes[] = new Node\Attribute(new Node\Name('ORM\UniqueConstraint'), [
        new Node\Arg(
          name: new Node\Identifier('name'),
          value: new Node\Scalar\String_(
            ($isOutputLocalized
              ? $this->entity->getTranslationTableName()
              : $this->entity->tableName) . '_unique_idx'
          )
        ),
        new Node\Arg(
          name: new Node\Identifier('columns'),
          value: new Node\Expr\Array_(
            [
              new Node\Expr\ArrayItem(
                new Node\Scalar\String_('locale')
              ),
              new Node\Expr\ArrayItem(
                new Node\Scalar\String_('object_id')
              )
            ]
          )
        ),
      ]);
    } else {
      $attributes[] = new Node\Attribute(new Node\Name('PROM\PromModel'), [
        new Node\Arg(
          name: new Node\Identifier('ignoreSeeding'),
          value: new Node\Expr\ConstFetch(
            new Node\Name(json_encode(!$this->entity->ignoreSeeding))
          )
        )
      ]);
    }

    $attributes[] = new Node\Attribute(new Node\Name('ORM\HasLifecycleCallbacks'));

    $class->attrGroups = [
      new Node\AttributeGroup($attributes)
    ];

    return $class;
  }
}