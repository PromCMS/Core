<?php

namespace PromCMS\Cli\Templates\Models;

use PhpParser\Node\Identifier;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;
use PromCMS\Cli\Templates\AbstractTemplate;
use PromCMS\Cli\Templates\Models\EnumTemplate\EnumTemplateItem;
use Symfony\Component\Filesystem\Path;

class EnumTemplate extends AbstractTemplate
{
  public static function from(string $target)
  {
    return new static($target);
  }

  public function __construct(
    string $target,
  ) {
    parent::__construct($target);
  }

  /**
   * @param array<EnumTemplateItem> $items
   */
  public function setup(string $name, string $namespace, array $items): static
  {
    $this->header->addLine('This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync.');

    $this->setTarget(
      Path::join(
        $this->getTarget(),
        'Base',
        $name . '.php'
      )
    );

    $this->ast = [
      new Stmt\Namespace_(
        name: new Name($namespace),
        attributes: [
          'comments' => [
            $this->header->toExpression()
          ]
        ],
        stmts: [
          new Stmt\Enum_(
            name: $name,
            subNodes: [
              'scalarType' => new Identifier(name: 'string'),
              'stmts' => array_map(
                fn(
                /** @var EnumTemplateItem */
                $item
              ) => new Stmt\EnumCase(name: $item->key, expr: new Scalar\String_($item->value)),
                $items
              )
            ]
          )
        ]
      )
    ];

    return $this;
  }
}