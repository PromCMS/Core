<?php
/**
 * @var \PromCMS\Core\PromConfig\Entity $entity
 */

use PromCMS\Core\PromConfig\RelationshipColumn;

echo "<?php\n";
?>
/**
 * This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync. 
 * Updates should be made to ../<?php echo $entity->phpName ?>.php as that is not overriden.
 */

namespace <?php echo $entity->namespace; ?>\Base;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as Mapping;
use PromCMS\Core\Database\Models\Abstract\BaseModel;

abstract class <?php echo $entity->phpName ?> extends BaseModel
{
<?php echo implode("\n", array_map(fn($trait) => "use \\$trait;", $entity->traits)); ?>
<?php echo "\n"; ?>

  <?php
  foreach ($entity->getColumns() as $column): ?>
          <?php if ($column instanceof RelationshipColumn): ?>
                  <?php if ($column->isManyToOne()): ?>
                  /**
                  * @var Collection<int, <?php echo $column->getReferencedEntity()->className ?>>
                  */
                  #[ManyToOne(targetEntity: <?php echo $column->getReferencedEntity()->className ?>::class)]
            <?php elseif ($column->isOneToOne()): ?>
                  #[OneToOne(targetEntity: <?php echo $column->getReferencedEntity()->className ?>::class)]
                  <?php endif; ?>
                  <?php
                  // In many-to-one relationship there are two sides, owning and reflecting side.
                  // If user defineds it, the reflecting side now have collection of its that references current item.
                  // Other side must be marked as readonly othervise it will be a database collumn which should not happen
                  if (!$column->readonly): ?>
                  #[ORM\JoinColumn(
                    name: '<?php echo $column->getDatabaseColumName() ?>',
                    referencedColumnName: '<?php echo $column->getReferenceFieldName() ?>',
                  <?php if (is_bool($column->unique) && $column->unique): ?>      unique: <?php echo json_encode($column->unique) ?>,<?php endif; ?>
                    nullable: <?php echo json_encode(!$column->required) ?>,
                  )]
                  <?php endif; ?>
          <?php else: ?>
            #[ORM\Column(
                  type: '<?php echo $column->getDoctrineType() ?>', 
            <?php if (is_bool($column->unique) && $column->unique): ?>      unique: <?php echo json_encode($column->unique) ?>,<?php echo "\n"; endif; ?>
            <?php if ($column->isEnumColumn()): ?>      enumType: <?php echo $column->getPhpType() ?>::class,<?php echo "\n"; endif; ?>
                  name: '<?php echo $column->getDatabaseColumName() ?>',
                  nullable: <?php echo json_encode(!$column->required) ?>,
                )]
          <?php endif; ?>
      #[Mapping\PromModelColumn(
            title: '<?php echo $column->title; ?>', 
            type: '<?php echo $column->type; ?>',
            editable: <?php echo json_encode(!$column->readonly); ?>,
            hide: <?php echo json_encode($column->hide); ?>,
            localized: <?php echo json_encode($column->localized); ?>
          )]
          protected <?php if (!$column->required):
            echo '?';
          endif; ?><?php echo $column->getPhpType() ?> $<?php echo $column->name; ?><?php if ($column->defaultValue): ?> = <?php echo $column->defaultValue; endif; ?>;
          <?php echo "\n"; ?>
  <?php endforeach; ?>

  public function __construct() {
    <?php $manyToOneColumns = array_filter($entity->getRelationshipColumns(), fn($column) => $column->isManyToOne()) ?>
    <?php foreach ($manyToOneColumns as $column): ?>
      $this-><?php $column->name; ?> = new Doctrine\Common\Collections\ArrayCollection();
    <?php endforeach; ?>
  }

  <?php $publicColumns = $entity->getColumns() ?>
  <?php foreach ($publicColumns as $column): ?>public function get<?php echo ucfirst($column->name) ?>() {
          return $this-><?php echo $column->name ?>;
        }
  
        public function set<?php echo ucfirst($column->name) ?>(<?php echo $column->getPhpType() ?><?php if (!$column->required):
                echo '|null';
              endif; ?> $<?php echo $column->name ?>) {
          return $this-><?php echo $column->name ?> = $<?php echo $column->name ?>;
        }
  <?php endforeach; ?>

  public function getId(): int|null {
    return $this->id;
  }
}
