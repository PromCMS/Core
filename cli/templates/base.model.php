<?php
/**
 * @var \PromCMS\Core\PromConfig\Entity $entity
 */

use PromCMS\Core\PromConfig\RelationshipColumn;

$localizedColumns = $entity->getLocalizedColumns();
$isLocalizedEntity = $entity->localized;

echo "<?php\n";
?>
/**
 * This file is generated by PromCMS, do not edit this file as changes made to this file will be overriden in the next model sync. 
 * Updates should be made to ../<?php echo $entity->phpName ?>.php as that is not overriden.
 */

namespace <?php echo $entity->namespace; ?>\Base;

use Doctrine\ORM\Mapping as ORM;
use PromCMS\Core\Database\Models\Mapping as Mapping;
use PromCMS\Core\Database\Models\Abstract\Entity;
<?php if ($isLocalizedEntity): ?>
use Gedmo\Mapping\Annotation as GedmoMapping;
use Doctrine\Common\Collections\ArrayCollection;
<?php endif; ?>

abstract class <?php echo $entity->phpName ?> extends Entity {
  <?php echo implode("\n  ", array_map(fn($trait) => "use \\$trait;", $entity->traits)); ?>
  <?php echo "\n"; ?>

<?php 
  foreach ($entity->getColumns() as $column): 
    $entityIsRequired = $entity->isSingleton() ? false : $column->required;
      if ($column instanceof RelationshipColumn): 
        if ($column->isManyToOne()): ?>
  /**
  * @var Collection<int, <?php echo $column->getReferencedEntity()->className ?>>
  */
  #[ManyToOne(targetEntity: <?php echo $column->getReferencedEntity()->className ?>::class)]
<?php   elseif ($column->isOneToOne()): ?>
  #[OneToOne(targetEntity: <?php echo $column->getReferencedEntity()->className ?>::class)]
<?php   endif; 
  // In many-to-one relationship there are two sides, owning and reflecting side.
  // If user defineds it, the reflecting side now have collection of its that references current item.
  // Other side must be marked as readonly othervise it will be a database collumn which should not happen
        if (!$column->readonly): ?>
  #[ORM\JoinColumn(
    name: '<?php echo $column->getDatabaseColumName() ?>',
    referencedColumnName: '<?php echo $column->getReferenceFieldName() ?>',
    <?php if (is_bool($column->unique) && $column->unique): ?>unique: <?php echo json_encode($column->unique) ?>,<?php endif; ?>
    nullable: <?php echo json_encode(!$entityIsRequired) ?>,
  )]
<?php   endif; ?>
<?php else: ?>
  #[ORM\Column(
    type: '<?php echo $column->getDoctrineType() ?>', 
<?php if (is_bool($column->unique) && $column->unique): ?>
    unique: <?php echo json_encode($column->unique) ?>,<?php echo "\n"; ?>
<?php endif; ?>
<?php if ($column->isEnumColumn()): ?>
    enumType: <?php echo $column->getPhpType() ?>::class,<?php echo "\n"; ?>
<?php endif; ?>
    name: '<?php echo $column->getDatabaseColumName() ?>',
    nullable: <?php echo json_encode(!$entityIsRequired) ?>,
  )]
<?php endif; ?>
  #[Mapping\PromModelColumn(
    title: '<?php echo $column->title; ?>', 
    type: '<?php echo $column->type; ?>',
    editable: <?php echo json_encode(!$column->readonly); ?>,
    hide: <?php echo json_encode($column->hide); ?>,
    localized: <?php echo json_encode($column->localized); echo "\n"; ?>
  )]
<?php if ($column->localized): ?>
  #[GedmoMapping\Translatable()]
<?php endif; ?>
  protected <?php if (!$column->required):echo '?';endif; ?><?php echo $column->getPhpType() ?> $<?php echo $column->name; ?><?php if ($column->defaultValue): ?> = <?php echo $column->defaultValue; endif; ?>;<?php echo "\n\n"; ?>
<?php endforeach; ?>
  public function __construct() {
<?php $manyToOneColumns = array_filter($entity->getRelationshipColumns(), fn($column) => $column->isManyToOne()); 
      if (!empty($manyToOneColumns)):
        foreach ($manyToOneColumns as $column): ?>
    $this-><?php $column->name; ?> = new Doctrine\Common\Collections\ArrayCollection();
<?php   endforeach; 
        echo "\n";
      endif; 
      if ($isLocalizedEntity): ?>
    $this->translations = new ArrayCollection();
<?php endif; ?>
  }

<?php $publicColumns = $entity->getColumns() ?>
<?php foreach ($publicColumns as $column): ?>
  public function get<?php echo ucfirst($column->name) ?>() {
    return $this-><?php echo $column->name ?>;
  }
  
  public function set<?php echo ucfirst($column->name) ?>(<?php echo $column->getPhpType() ?><?php if (!$column->required): echo '|null';endif; ?> $<?php echo $column->name ?>) {
    return $this-><?php echo $column->name ?> = $<?php echo $column->name ?>;
  }
<?php endforeach; ?>
<?php if ($isLocalizedEntity): ?>
<?php $translationEntity = $entity->getTranslationClassName(); ?>
  
  #[ORM\OneToMany(targetEntity: \<?php echo $translationEntity; ?>::class, mappedBy: 'object', cascade: ['persist', 'remove'])]
  private $translations;

  public function addTranslation(\<?php echo $translationEntity; ?> $t)
  {
      if (!$this->translations->contains($t)) {
          $this->translations[] = $t;
          $t->setObject($this);
      }
  }

  public function fill(array $values, ?string $language = null)
  {
    $columns = $this->getColumnsForValues($values);

    foreach ($columns as $propertyName => $proper) {
      if ($language && $proper->localized) {
        $this->addTranslation(new \<?php echo $translationEntity; ?>($language, $propertyName, $values[$propertyName]));
      } else {
        $this->{$propertyName} = $values[$propertyName];
      }
    }

    return $this;
  }
<?php endif; ?>

  public function getId(): int|null {
    return $this->id;
  }
}
